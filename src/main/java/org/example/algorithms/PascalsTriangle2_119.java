package org.example.algorithms;

import java.util.ArrayList;
import java.util.List;

public class PascalsTriangle2_119 {
    /**
     * Класс для вычисления строки треугольника Паскаля.
     * <p>
     * Треугольник Паскаля — это треугольный массив, где каждое число является суммой двух чисел, расположенных над ним.
     * Каждое число в строке n соответствует биномиальному коэффициенту C(n, k), который можно вычислить
     * с помощью факториалов:
     * <p>
     * C(n, k) = n! / (k! * (n - k)!)
     * <p>
     * Для вычисления строки треугольника Паскаля с использованием факториалов, необходимо вычислить
     * факториалы для каждого значения k от 0 до n. Однако этот метод может быть неэффективным для больших n,
     * так как факториалы быстро растут и могут привести к переполнению при использовании типов данных
     * с фиксированной длиной, таких как int или long.
     * <p>
     * В этом классе также реализован оптимизированный метод для вычисления строк треугольника Паскаля,
     * который избегает прямого вычисления факториалов. Вместо этого используется рекурсивная формула:
     * <p>
     * C(n, k) = C(n, k-1) * (n - k + 1) / k
     * <p>
     * Этот подход позволяет последовательно вычислять биномиальные коэффициенты, начиная с C(n, 0) = 1,
     * и обновлять значение C для каждого следующего k. Использование типа long для хранения значений
     * помогает избежать переполнения. Такой метод более эффективен и подходит для больших значений n.
     */
    public static int factorial(int n) {
        int result = 1;
        for (int i = 1; i <= n; i++) {
            result *= i;
        }
        return result;
    }

    public static List<Integer> getRow(int rowIndex) {
        List<Integer> result = new ArrayList<>();
        long c = 1;
        for (int k = 0; k <= rowIndex; k++) {
            result.add((int) c);
            c = c * (rowIndex - k) / (k + 1);
        }
        return result;
    }

    public static void main(String[] args) {
        System.out.println(getRow(13));
    }
}
